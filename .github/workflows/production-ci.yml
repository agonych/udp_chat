name: Production CI

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  # Job 1: Build Docker images
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build server image
        uses: docker/build-push-action@v5
        with:
          context: ./server
          file: ./server/Dockerfile
          push: false
          load: true
          tags: server:${{ github.sha }}
          cache-from: type=gha,scope=server-prod
          cache-to: type=gha,mode=max,scope=server-prod
      
      - name: Build connector image
        uses: docker/build-push-action@v5
        with:
          context: ./connector
          file: ./connector/Dockerfile
          push: false
          load: true
          tags: connector:${{ github.sha }}
          cache-from: type=gha,scope=connector-prod
          cache-to: type=gha,mode=max,scope=connector-prod
      
      - name: Build client image
        uses: docker/build-push-action@v5
        with:
          context: ./client
          file: ./client/Dockerfile
          push: false
          load: true
          tags: client:${{ github.sha }}
          cache-from: type=gha,scope=client-prod
          cache-to: type=gha,mode=max,scope=client-prod
      
      - name: Save Docker images
        run: |
          docker save server:${{ github.sha }} -o server-image.tar
          docker save connector:${{ github.sha }} -o connector-image.tar
          docker save client:${{ github.sha }} -o client-image.tar
      
      - name: Upload server image
        uses: actions/upload-artifact@v4
        with:
          name: server-image
          path: server-image.tar
          retention-days: 1
      
      - name: Upload connector image
        uses: actions/upload-artifact@v4
        with:
          name: connector-image
          path: connector-image.tar
          retention-days: 1
      
      - name: Upload client image
        uses: actions/upload-artifact@v4
        with:
          name: client-image
          path: client-image.tar
          retention-days: 1

  # Job 2: Push to Azure Container Registry
  push-to-acr:
    name: Push to ACR
    runs-on: ubuntu-latest
    needs: build-images
    environment: Production
    permissions:
      id-token: write
      contents: read
    
    strategy:
      matrix:
        service: [server, connector, client]
      fail-fast: false
    
    steps:
      - name: Download ${{ matrix.service }} image
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.service }}-image
      
      - name: Load Docker image
        run: |
          docker load -i ${{ matrix.service }}-image.tar
      
      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: Login to Azure Container Registry
        run: |
          az acr login --name udpchatnewacr
      
      - name: Tag and push images
        env:
          ACR_LOGIN_SERVER: udpchatnewacr.azurecr.io
          SERVICE: ${{ matrix.service }}
          SHA_TAG: ${{ github.sha }}
        run: |
          # Tag with SHA and latest
          docker tag $SERVICE:$SHA_TAG $ACR_LOGIN_SERVER/$SERVICE:$SHA_TAG
          docker tag $SERVICE:$SHA_TAG $ACR_LOGIN_SERVER/$SERVICE:latest
          
          # Push both tags
          docker push $ACR_LOGIN_SERVER/$SERVICE:$SHA_TAG
          docker push $ACR_LOGIN_SERVER/$SERVICE:latest
          
          echo "Pushed $SERVICE:$SHA_TAG and $SERVICE:latest to ACR"

  # Job 3: Deploy to Inactive Color (Blue/Green)
  deploy-inactive:
    name: Deploy to Inactive Color
    runs-on: ubuntu-latest
    needs: push-to-acr
    environment: Production
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: Get AKS credentials
        run: |
          az aks get-credentials --resource-group udpchatnew --name udpchatnewaks --overwrite-existing
      
      - name: Install Helm
        uses: azure/setup-helm@v4.3.0
        with:
          version: 'latest'
      
      - name: Create namespace if not exists
        run: |
          kubectl create namespace udpchat-prod --dry-run=client -o yaml | kubectl apply -f -
      
      - name: Determine inactive color
        id: color
        run: |
          # Get current active color from ingress label
          ACTIVE=$(kubectl -n udpchat-prod get ingress udpchat-www-www -o jsonpath='{.metadata.labels.app\.kubernetes\.io/color}' 2>/dev/null || echo "green")
          
          # Determine inactive color
          if [ "$ACTIVE" == "green" ]; then
            INACTIVE="blue"
          else
            INACTIVE="green"
          fi
          
          echo "Active color: $ACTIVE"
          echo "Deploying to inactive color: $INACTIVE"
          echo "color=$INACTIVE" >> $GITHUB_OUTPUT
      
      - name: Create secrets
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          GRAFANA_ADMIN_PASSWORD: ${{ secrets.GRAFANA_ADMIN_PASSWORD }}
        run: |
          kubectl create secret generic udpchat-secrets \
            --namespace udpchat-prod \
            --from-literal=DB_HOST="postgres" \
            --from-literal=DB_PORT="5432" \
            --from-literal=DB_NAME="udpchat" \
            --from-literal=DB_USER="udpchat" \
            --from-literal=DB_PASSWORD="" \
            --from-literal=OPENAI_API_KEY="${OPENAI_API_KEY}" \
            --from-literal=POSTGRES_PASSWORD="${POSTGRES_PASSWORD}" \
            --from-literal=GRAFANA_ADMIN_PASSWORD="${GRAFANA_ADMIN_PASSWORD}" \
            --dry-run=client -o yaml | kubectl apply -f -
      
      - name: Deploy with Helm to ${{ steps.color.outputs.color }}
        working-directory: ./deploy/helm/chart
        env:
          ACR_LOGIN_SERVER: udpchatnewacr.azurecr.io
          TAG: latest
          COLOR: ${{ steps.color.outputs.color }}
        run: |
          helm upgrade --install udpchat-$COLOR . \
            --namespace udpchat-prod \
            -f values.prod.yaml \
            --set deployTarget=$COLOR \
            --set images.server=$ACR_LOGIN_SERVER/server:$TAG \
            --set images.connector=$ACR_LOGIN_SERVER/connector:$TAG \
            --set images.client=$ACR_LOGIN_SERVER/client:$TAG \
            --wait \
            --timeout 10m
      
      - name: Deployment status
        if: always()
        env:
          COLOR: ${{ steps.color.outputs.color }}
        run: |
          echo "## Deployment Status - $COLOR Environment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Deployed to **inactive** color: **$COLOR**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Pods" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          kubectl get pods -n udpchat-prod -l app.kubernetes.io/color=$COLOR >> $GITHUB_STEP_SUMMARY 2>&1 || true
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Services" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          kubectl get svc -n udpchat-prod -l app.kubernetes.io/color=$COLOR >> $GITHUB_STEP_SUMMARY 2>&1 || true
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Test the $COLOR environment" >> $GITHUB_STEP_SUMMARY
          echo "- Use \`./deploy/scripts/set-active.sh $COLOR\` to switch traffic" >> $GITHUB_STEP_SUMMARY

