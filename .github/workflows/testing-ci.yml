name: Testing CI

on:
  push:
    branches:
      - testing
  workflow_dispatch:

jobs:
  # Job 1: Run unit tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    services:
      postgresql:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: udpchat_user
          POSTGRES_PASSWORD: udpchat_password
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: |
            server/requirements.txt
            server/requirements-test.txt
      
      - name: Install dependencies
        working-directory: ./server
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt
      
      - name: Set up environment variables
        run: |
          echo "DB_HOST=localhost" >> $GITHUB_ENV
          echo "DB_PORT=5432" >> $GITHUB_ENV
          echo "DB_NAME=postgres" >> $GITHUB_ENV
          echo "DB_USER=udpchat_user" >> $GITHUB_ENV
          echo "DB_PASSWORD=udpchat_password" >> $GITHUB_ENV
          echo "DEBUG=False" >> $GITHUB_ENV
      
      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U udpchat_user; do
            echo "Waiting for PostgreSQL to be ready..."
            sleep 2
          done
        env:
          PGPASSWORD: udpchat_password
      
      - name: Run tests
        working-directory: ./server
        run: |
          python run_tests.py
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: udpchat_user
          DB_PASSWORD: udpchat_password
          DATABASE_URL: postgresql://udpchat_user:udpchat_password@localhost:5432/postgres
      
  # Job 2: Snyk dependency scan
  snyk-scan:
    name: Snyk Dependency Scan
    runs-on: ubuntu-latest
    needs: unit-tests
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: server/requirements.txt
      
      - name: Install dependencies
        working-directory: ./server
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Install Snyk CLI
        run: |
          curl -Lo snyk https://github.com/snyk/cli/releases/latest/download/snyk-linux
          chmod +x snyk
          sudo mv snyk /usr/local/bin/
      
      - name: Run Snyk to check Python dependencies
        working-directory: ./server
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          snyk test --file=requirements.txt --severity-threshold=high --sarif-file-output=snyk.sarif || true
      
      - name: Upload Snyk results to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('server/snyk.sarif') != ''
        with:
          sarif_file: server/snyk.sarif
          category: snyk-python

  # Job 3: Build Docker images
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: snyk-scan
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build server image
        uses: docker/build-push-action@v5
        with:
          context: ./server
          file: ./server/Dockerfile
          push: false
          load: true
          tags: server:${{ github.sha }}
          cache-from: type=gha,scope=server
          cache-to: type=gha,mode=max,scope=server
      
      - name: Build connector image
        uses: docker/build-push-action@v5
        with:
          context: ./connector
          file: ./connector/Dockerfile
          push: false
          load: true
          tags: connector:${{ github.sha }}
          cache-from: type=gha,scope=connector
          cache-to: type=gha,mode=max,scope=connector
      
      - name: Build client image
        uses: docker/build-push-action@v5
        with:
          context: ./client
          file: ./client/Dockerfile
          push: false
          load: true
          tags: client:${{ github.sha }}
          cache-from: type=gha,scope=client
          cache-to: type=gha,mode=max,scope=client
      
      - name: Save Docker images
        run: |
          docker save server:${{ github.sha }} -o server-image.tar
          docker save connector:${{ github.sha }} -o connector-image.tar
          docker save client:${{ github.sha }} -o client-image.tar
      
      - name: Upload server image
        uses: actions/upload-artifact@v4
        with:
          name: server-image
          path: server-image.tar
          retention-days: 1
      
      - name: Upload connector image
        uses: actions/upload-artifact@v4
        with:
          name: connector-image
          path: connector-image.tar
          retention-days: 1
      
      - name: Upload client image
        uses: actions/upload-artifact@v4
        with:
          name: client-image
          path: client-image.tar
          retention-days: 1

  # Job 4: Docker Scout scan
  docker-scout-scan:
    name: Docker Scout Scan
    runs-on: ubuntu-latest
    needs: build-images
    permissions:
      contents: read
      security-events: write
      packages: write
    
    strategy:
      matrix:
        service: [server, connector, client]
      fail-fast: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download ${{ matrix.service }} image
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.service }}-image
      
      - name: Load Docker image
        run: |
          docker load -i ${{ matrix.service }}-image.tar
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Run Docker Scout scan
        uses: docker/scout-action@v1
        continue-on-error: true
        with:
          command: cves
          image: ${{ matrix.service }}:${{ github.sha }}
          only-severities: critical,high
          exit-code: false
          sarif-file: scout-${{ matrix.service }}.sarif
      
      - name: Upload Docker Scout results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('scout-${{ matrix.service }}.sarif') != ''
        with:
          sarif_file: scout-${{ matrix.service }}.sarif
          category: docker-scout-${{ matrix.service }}

  # Job 5: Push to Azure Container Registry
  push-to-acr:
    name: Push to ACR
    runs-on: ubuntu-latest
    needs: build-images
    environment: Production
    permissions:
      id-token: write
      contents: read
    
    strategy:
      matrix:
        service: [server, connector, client]
      fail-fast: false
    
    steps:
      - name: Download ${{ matrix.service }} image
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.service }}-image
      
      - name: Load Docker image
        run: |
          docker load -i ${{ matrix.service }}-image.tar
      
      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: Login to Azure Container Registry
        run: |
          az acr login --name udpchatnewacr
      
      - name: Tag and push images
        env:
          ACR_LOGIN_SERVER: udpchatnewacr.azurecr.io
          SERVICE: ${{ matrix.service }}
          SHA_TAG: ${{ github.sha }}
        run: |
          # Tag with SHA
          docker tag $SERVICE:$SHA_TAG $ACR_LOGIN_SERVER/$SERVICE:$SHA_TAG
          docker tag $SERVICE:$SHA_TAG $ACR_LOGIN_SERVER/$SERVICE:testing-latest
          
          # Push both tags
          docker push $ACR_LOGIN_SERVER/$SERVICE:$SHA_TAG
          docker push $ACR_LOGIN_SERVER/$SERVICE:testing-latest
          
          echo "Pushed $SERVICE:$SHA_TAG and $SERVICE:testing-latest to ACR"

  # Job 6: Deploy to Testing Environment
  deploy-testing:
    name: Deploy to Testing
    runs-on: ubuntu-latest
    needs: push-to-acr
    environment: Production
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: Get AKS credentials
        run: |
          az aks get-credentials --resource-group udpchatnew --name udpchatnewaks --overwrite-existing
      
      - name: Install Helm
        uses: azure/setup-helm@v4.3.0
        with:
          version: 'latest'
      
      - name: Create namespace if not exists
        run: |
          kubectl create namespace udpchat-testing --dry-run=client -o yaml | kubectl apply -f -
      
      - name: Create secrets
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD_TESTING }}
        run: |
          kubectl create secret generic udpchat-app \
            --namespace udpchat-testing \
            --from-literal=DB_HOST="postgres" \
            --from-literal=DB_PORT="5432" \
            --from-literal=DB_NAME="udpchat" \
            --from-literal=DB_USER="udpchat" \
            --from-literal=DB_PASSWORD="" \
            --from-literal=OPENAI_API_KEY="${OPENAI_API_KEY}" \
            --from-literal=POSTGRES_PASSWORD="${POSTGRES_PASSWORD}" \
            --dry-run=client -o yaml | kubectl apply -f -
      
      - name: Deploy with Helm
        working-directory: ./deploy/helm/chart
        env:
          ACR_LOGIN_SERVER: udpchatnewacr.azurecr.io
          TAG: testing-latest
        run: |
          helm upgrade --install udpchat-testing . \
            --namespace udpchat-testing \
            -f values.testing.yaml \
            --set deployTarget=testing \
            --set images.server=$ACR_LOGIN_SERVER/server:$TAG \
            --set images.connector=$ACR_LOGIN_SERVER/connector:$TAG \
            --set images.client=$ACR_LOGIN_SERVER/client:$TAG \
            --wait \
            --timeout 10m
      
      - name: Deployment status
        if: always()
        run: |
          echo "## Deployment Status" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          kubectl get pods -n udpchat-testing >> $GITHUB_STEP_SUMMARY 2>&1 || true
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Services" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          kubectl get svc -n udpchat-testing >> $GITHUB_STEP_SUMMARY 2>&1 || true
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Ingress" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          kubectl get ingress -n udpchat-testing >> $GITHUB_STEP_SUMMARY 2>&1 || true
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
