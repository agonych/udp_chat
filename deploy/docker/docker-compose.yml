version: '3.8'

services:
  # PostgreSQL Database
  postgresql:
    image: postgres:15-alpine
    container_name: udpchat_postgresql
    environment:
      POSTGRES_DB: ${DB_NAME:-udpchat}
      POSTGRES_USER: ${DB_USER:-udpchat_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-udpchat_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../../server/db/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    ports:
      - "${DB_PORT:-5432}:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-udpchat_user} -d ${DB_NAME:-udpchat} -h 127.0.0.1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - udpchat_network

  # Python UDP Server
  server:
    build:
      context: ../../server
      dockerfile: Dockerfile
    container_name: udpchat_server
    environment:
      - DB_HOST=postgresql
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-udpchat}
      - DB_USER=${DB_USER:-udpchat_user}
      - DB_PASSWORD=${DB_PASSWORD:-udpchat_password}
      - SERVER_IP=0.0.0.0
      - SERVER_PORT=9999
      - DEBUG=${DEBUG:-False}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - AI_MODE=${AI_MODE:-ollama}
    ports:
      - "${SERVER_PORT:-9999}:9999/udp"
      - "8000:8000"  # Prometheus metrics
    depends_on:
      postgresql:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - server_storage:/app/storage
    networks:
      - udpchat_network
    healthcheck:
      test: ["CMD-SHELL", "python3 -c \"import socket; s=socket.socket(socket.AF_INET, socket.SOCK_DGRAM); s.settimeout(5); s.sendto(b'{\\\"type\\\":\\\"PING\\\"}', ('localhost', 9999)); s.close(); print('UDP server responding')\" || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Node.js WebSocket Connector
  connector:
    build:
      context: ../../connector
      dockerfile: Dockerfile
    container_name: udpchat_connector
    environment:
      - UDP_SERVER_HOST=server
      - UDP_SERVER_PORT=9999
      - WS_PORT=8001
      - INACTIVITY_TIMEOUT_MS=600000
    ports:
      - "${CONNECTOR_PORT:-8001}:8001"
      - "3002:3000"  # Prometheus metrics
    depends_on:
      - server
    restart: unless-stopped
    networks:
      - udpchat_network
    healthcheck:
      test: ["CMD-SHELL", "wget -q -O- http://localhost:8001/ >/dev/null 2>&1 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # React Client (Nginx)
  client:
    build:
      context: ../../client
      dockerfile: Dockerfile
    container_name: udpchat_client
    ports:
      - "${CLIENT_PORT:-3000}:80"
    depends_on:
      - connector
    restart: unless-stopped
    networks:
      - udpchat_network
    healthcheck:
      test: ["CMD-SHELL", "wget -q -O- http://localhost/ >/dev/null 2>&1 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: udpchat_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - udpchat_network
    healthcheck:
      test: ["CMD-SHELL", "prometheus --version >/dev/null 2>&1 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana - Metrics Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: udpchat_grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_DATABASE_SSL_MODE=disable
    volumes:
      - grafana_data:/var/lib/grafana
      - ../monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ../monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    restart: unless-stopped
    networks:
      - udpchat_network
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:3000/api/health >/dev/null || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  server_storage:
    driver: local

  # Prometheus data
  prometheus_data:
    driver: local

  # Grafana data
  grafana_data:
    driver: local

networks:
  udpchat_network:
    driver: bridge
