apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgresql
  namespace: udpchat
spec:
  serviceName: postgresql
  replicas: 1
  selector:
    matchLabels:
      app: postgresql
  template:
    metadata:
      labels:
        app: postgresql
    spec:
      containers:
      - name: postgresql
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: DB_NAME
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: DB_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: DB_PASSWORD
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: postgres-init
          mountPath: /docker-entrypoint-initdb.d
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      volumes:
      - name: postgres-init
        configMap:
          name: postgresql-init
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 1Gi

---
apiVersion: v1
kind: Service
metadata:
  name: postgresql
  namespace: udpchat
spec:
  selector:
    app: postgresql
  ports:
  - port: 5432
    targetPort: 5432
    name: postgres
  type: ClusterIP

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgresql-init
  namespace: udpchat
data:
  01-schema.sql: |
    -- 1. Users
    CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY, -- Auto-incrementing user ID
        user_id VARCHAR(255) UNIQUE NOT NULL, -- Randomised unique public ID
        name VARCHAR(255), -- Optional public name
        email VARCHAR(255) UNIQUE NOT NULL, -- Email, compulsory for login
        password VARCHAR(255), -- Password is optional, user can choose to protect their account with a password
        is_admin BOOLEAN DEFAULT FALSE, -- Admin flag
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Account creation timestamp
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Account update timestamp
        last_active_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP -- Last active timestamp
    );

    -- Index on users.user_id
    CREATE INDEX IF NOT EXISTS idx_users_user_id ON users(user_id);

    -- 2. Sessions
    CREATE TABLE IF NOT EXISTS sessions (
        id SERIAL PRIMARY KEY, -- Auto-incrementing session ID
        session_id VARCHAR(255) UNIQUE NOT NULL, -- Randomised unique public session identifier
        user_id INTEGER, -- User ID, foreign key to users table
        session_key VARCHAR(255) UNIQUE NOT NULL, -- Unique AES session encryption key
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Session creation timestamp
        last_active_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Last active timestamp
        FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE -- Foreign key constraint to users table
    );

    -- Index on sessions.session_id
    CREATE INDEX IF NOT EXISTS idx_sessions_session_id ON sessions(session_id);
    -- Index on sessions.user_id
    CREATE INDEX IF NOT EXISTS idx_sessions_user_id ON sessions(user_id);
    -- Index on sessions.session_key
    CREATE INDEX IF NOT EXISTS idx_sessions_session_key ON sessions(session_key);

    -- 3. Nonces
    CREATE TABLE IF NOT EXISTS nonces (
        session_id INTEGER NOT NULL, -- Session ID, foreign key to sessions table
        nonce VARCHAR(255) NOT NULL, -- Randomised unique nonce
        PRIMARY KEY (session_id, nonce), -- Composite primary key
        FOREIGN KEY (session_id) REFERENCES sessions(id) ON DELETE CASCADE -- Foreign key constraint to sessions table
    );

    -- Index on nonces.session_id
    CREATE INDEX IF NOT EXISTS idx_nonces_session_id ON nonces(session_id);
    -- Index on nonces.nonce
    CREATE INDEX IF NOT EXISTS idx_nonces_nonce ON nonces(nonce);

    -- 4. Rooms
    CREATE TABLE IF NOT EXISTS rooms (
        id SERIAL PRIMARY KEY, -- Auto-incrementing room ID
        room_id VARCHAR(255) UNIQUE NOT NULL, -- Randomised unique public room identifier
        name VARCHAR(255) UNIQUE, -- Optional public name
        is_private BOOLEAN DEFAULT FALSE, -- Private room flag, default is public
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Room creation timestamp
        last_active_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP -- Last active timestamp
    );

    -- Index on rooms.room_id
    CREATE INDEX IF NOT EXISTS idx_rooms_room_id ON rooms(room_id);

    -- 5. Members (users in rooms)
    CREATE TABLE IF NOT EXISTS members (
        room_id INTEGER NOT NULL, -- Room ID, foreign key to rooms table
        user_id INTEGER NOT NULL, -- User ID, foreign key to users table
        is_admin BOOLEAN DEFAULT FALSE, -- Admin flag for the user in the room, default is false
        joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Timestamp when the user joined the room
        PRIMARY KEY (room_id, user_id), -- Composite primary key
        FOREIGN KEY (room_id) REFERENCES rooms(id) ON DELETE CASCADE, -- Foreign key constraint to rooms table
        FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE -- Foreign key constraint to users table
    );

    -- Index on members.room_id
    CREATE INDEX IF NOT EXISTS idx_members_room_id ON members(room_id);
    -- Index on members.user_id
    CREATE INDEX IF NOT EXISTS idx_members_user_id ON members(user_id);

    -- 6. Messages
    CREATE TABLE IF NOT EXISTS messages (
        id SERIAL PRIMARY KEY, -- Auto-incrementing message ID
        room_id INTEGER NOT NULL, -- Room ID, foreign key to rooms table
        user_id INTEGER NOT NULL, -- User ID, foreign key to users table
        content TEXT NOT NULL, -- Message content
        is_announcement BOOLEAN DEFAULT FALSE, -- Announcement flag, default is false
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Message creation timestamp
        FOREIGN KEY (room_id) REFERENCES rooms(id) ON DELETE CASCADE, -- Foreign key constraint to rooms table
        FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE -- Foreign key constraint to users table
    );

    -- Index on messages.room_id
    CREATE INDEX IF NOT EXISTS idx_messages_room_id ON messages(room_id);
    -- Index on messages.user_id
    CREATE INDEX IF NOT EXISTS idx_messages_user_id ON messages(user_id);

    -- PostgreSQL-specific optimizations and triggers

    -- Function to update the updated_at timestamp
    CREATE OR REPLACE FUNCTION update_updated_at_column()
    RETURNS TRIGGER AS $$
    BEGIN
        NEW.updated_at = CURRENT_TIMESTAMP;
        RETURN NEW;
    END;
    $$ language 'plpgsql';

    -- Triggers to automatically update updated_at timestamps
    -- Only apply to tables that have the updated_at column
    CREATE TRIGGER update_users_updated_at BEFORE UPDATE ON users
        FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

    -- Additional indexes for better performance
    CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);
    CREATE INDEX IF NOT EXISTS idx_messages_created_at ON messages(created_at);
    CREATE INDEX IF NOT EXISTS idx_sessions_last_active_at ON sessions(last_active_at);
    CREATE INDEX IF NOT EXISTS idx_users_last_active_at ON users(last_active_at);
