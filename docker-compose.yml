version: '3.8'

services:
  # PostgreSQL Database
  postgresql:
    image: postgres:15-alpine
    container_name: udpchat_postgresql
    environment:
      POSTGRES_DB: ${DB_NAME:-udpchat}
      POSTGRES_USER: ${DB_USER:-udpchat_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-udpchat_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./server/db/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    ports:
      - "${DB_PORT:-5432}:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-udpchat_user} -d ${DB_NAME:-udpchat}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - udpchat_network

  # Python UDP Server
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: udpchat_server
    environment:
      - DB_HOST=postgresql
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-udpchat}
      - DB_USER=${DB_USER:-udpchat_user}
      - DB_PASSWORD=${DB_PASSWORD:-udpchat_password}
      - SERVER_IP=0.0.0.0
      - SERVER_PORT=9999
      - DEBUG=${DEBUG:-False}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - AI_MODE=${AI_MODE:-ollama}
    ports:
      - "${SERVER_PORT:-9999}:9999"
    depends_on:
      - postgresql
    restart: unless-stopped
    volumes:
      - server_storage:/app/storage
    networks:
      - udpchat_network
    healthcheck:
      test: ["CMD-SHELL", "python3 -c \"import socket; s=socket.socket(socket.AF_INET, socket.SOCK_DGRAM); s.settimeout(5); s.sendto(b'{\\\"type\\\":\\\"PING\\\"}', ('localhost', 9999)); s.close(); print('UDP server responding')\" || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Node.js WebSocket Connector
  connector:
    build:
      context: ./connector
      dockerfile: Dockerfile
    container_name: udpchat_connector
    environment:
      - UDP_SERVER_HOST=server
      - UDP_SERVER_PORT=9999
      - WS_PORT=8000
      - INACTIVITY_TIMEOUT_MS=600000
    ports:
      - "${CONNECTOR_PORT:-8000}:8000"
    depends_on:
      - server
    restart: unless-stopped
    networks:
      - udpchat_network
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 8000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # React Client (Nginx)
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: udpchat_client
    ports:
      - "${CLIENT_PORT:-3000}:80"
    depends_on:
      - connector
    restart: unless-stopped
    networks:
      - udpchat_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: udpchat_nginx
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - client
      - connector
    restart: unless-stopped
    networks:
      - udpchat_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  server_storage:
    driver: local

networks:
  udpchat_network:
    driver: bridge
